# -*- coding: utf-8 -*-
"""SVMSAT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kg9ZXz2zAlj8c7CqE85Z5iqYNnYOM3Ps

IMPORTS
"""

!pip install pydub
!pip install praat-parselmouth
import parselmouth
import tensorflow as tf
import numpy as np
import scipy
from scipy import misc
import glob
from PIL import Image
import os
import matplotlib.pyplot as plt
import librosa
import pandas as pd
from pydub import AudioSegment
import seaborn as sns
from scipy import signal as sg
from scipy.io import wavfile
import math

from google.colab import drive
drive.mount('/content/drive')

"""AUDIO SAMPLES SLICING"""

i = 0
du = 20
j=0
for filename in os.listdir(os.path.join('/content/drive/MyDrive/ASMA/Work Package 5/BR/CUT')):
    if filename != '.DS_Store':
      song  =  os.path.join('/content/drive/MyDrive/ASMA/Work Package 5/BR/CUT',f'{filename}')
      j = j+1
      for w in range(0,151):
        i = i+1
        t1 = du*(w)*1000
        t2 = du*(w+1)*1000
        newAudio = AudioSegment.from_file(song)
        new = newAudio[t1:t2]
        print(new.duration_seconds)
        if new.duration_seconds == du:
          new.export(f'/content/drive/MyDrive/ASMA/Work Package 5/BR/2sec/{str(w)}.wav', format="wav")

"""MS TO PITCH"""

threshold = 80
i=0
MIC_PITCH = []
for filename in os.listdir(os.path.join('/content/drive/MyDrive/ASMA/Work Package 5/BR/DATASET/MIC/')):
    if filename != '.DS_Store':
      snd = parselmouth.Sound('/content/drive/MyDrive/ASMA/Work Package 5/BR/DATASET/MIC/' + str(i) +'.wav')
      pitch = snd.to_pitch()
      pitch_values = pitch.selected_array['frequency']
      MIC_PITCH.append(np.mean(pitch_values[pitch_values>threshold]))
      i=i+1

"""EGG TO PITCH"""

threshold = 80
i=0
EGG_PITCH = []
for filename in os.listdir(os.path.join('/content/drive/MyDrive/ASMA/Work Package 5/BR/DATASET/EGG/')):
    if filename != '.DS_Store':
      snd = parselmouth.Sound('/content/drive/MyDrive/ASMA/Work Package 5/BR/DATASET/EGG/' + str(i) +'.wav')
      pitch = snd.to_pitch()
      pitch_values = pitch.selected_array['frequency']
      EGG_PITCH.append(np.mean(pitch_values[pitch_values>threshold]))
      i=i+1

"""MIC TO EGG SUBTRACT"""

import numpy as np
np.set_printoptions(suppress=True)
SUB_PITCH = []
decimals = 4

EGG_PITCH_NP = np.array(EGG_PITCH)
EGG_PITCH_NP = np.around(EGG_PITCH_NP,decimals)

MIC_PITCH_NP = np.array(MIC_PITCH)
MIC_PITCH_NP = np.around(MIC_PITCH_NP,decimals)

SUB_PITCH_NP = np.array(SUB_PITCH)

SUB_PITCH_NP = MIC_PITCH_NP - EGG_PITCH_NP
SUB_PITCH_NP = np.around(SUB_PITCH_NP,decimals)

SUB = SUB_PITCH_NP

"""CONVERT TO MEL SCALE"""

decimals = 4
MEL_MIC_PITCH_NP = np.zeros(456)
MEL_EGG_PITCH_NP = np.zeros(456)
MEL_SUB_PITCH_NP = np.zeros(456)

for i in range (0, 456):
  MEL_MIC_PITCH_NP[i] = 1127 * math.log(1 + (MIC_PITCH_NP[i]/700))
  MEL_EGG_PITCH_NP[i] = 1127 * math.log(1 + (EGG_PITCH_NP[i]/700))

MEL_SUB_PITCH_NP = MEL_MIC_PITCH_NP - MEL_EGG_PITCH_NP
MEL_SUB_PITCH_NP = np.around(MEL_SUB_PITCH_NP,decimals)

"""IMPORT BREATHINESS RATINGS"""

br_eval_df = pd.read_csv('/content/drive/MyDrive/ASMA/Work Package 5/BR/breathiness.csv')
BR_EVAL = br_eval_df.to_numpy()
BR_EVAL = BR_EVAL.flatten()

"""# COMPARISON"""

import sys
np.set_printoptions(threshold=sys.maxsize)
COMP = np.zeros((456, 6))

for i in range (0, 456):
  COMP[i][0]=i
  COMP[i][1]=MIC_PITCH_NP[i]
  COMP[i][2]=EGG_PITCH_NP[i]
  COMP[i][3]=SUB_PITCH_NP[i]
  COMP[i][4]=abs(SUB_PITCH_NP[i])
  COMP[i][5]=BR_EVAL[i]

print(COMP)

"""IMPORT OQ VALUES"""

oq_all_df = pd.read_csv('/content/drive/MyDrive/ASMA/Work Package 5/BR/OQ_ALL.csv')
OQ_ALL = oq_all_df.to_numpy()
DOQ = np.zeros(456)
HOQ = np.zeros(456)
DOQ_COUNT = np.zeros(456)
for i in range (0, 203089):
  ind = OQ_ALL[i][0]
  DOQ[ind] = DOQ[ind] + OQ_ALL[i][7]
  HOQ[ind] = HOQ[ind] + OQ_ALL[i][8]
  DOQ_COUNT[ind] = DOQ_COUNT[ind] + 1
for j in range (0, 456):
  DOQ[j] = DOQ[j]/DOQ_COUNT[j]
  HOQ[j] = HOQ[j]/DOQ_COUNT[j]

"""IMPORT ABI VALUES"""

abi_df = pd.read_csv('/content/drive/MyDrive/ASMA/Work Package 5/BR/abi.csv')
ABI = abi_df.to_numpy()
ABI = ABI.flatten()

"""IMPORT CPP VALUES"""

import sys
np.set_printoptions(threshold=sys.maxsize)
cpp_eval_df = pd.read_csv('/content/drive/MyDrive/ASMA/Work Package 5/BR/CPPs.csv')
CPP_EVAL = cpp_eval_df.to_numpy()
CPP_EVAL = CPP_EVAL.flatten()

import sys
np.set_printoptions(threshold=sys.maxsize)
cpp_egg_eval_df = pd.read_csv('/content/drive/MyDrive/ASMA/Work Package 5/BR/CPPs-EGG.csv')
CPP_EGG_EVAL = cpp_egg_eval_df.to_numpy()
CPP_EGG_EVAL = CPP_EGG_EVAL.flatten()

"""ALL VALUES"""

COMP = np.zeros((456, 14))
for i in range (0, 456):
  COMP[i][0]=i
  COMP[i][1]=MIC_PITCH_NP[i]
  COMP[i][2]=EGG_PITCH_NP[i]
  COMP[i][3]=SUB_PITCH_NP[i]
  COMP[i][4]=abs(SUB_PITCH_NP[i])
  COMP[i][5]=BR_EVAL[i]
  COMP[i][6]=CPP_EVAL[i]
  COMP[i][7]=CPP_EGG_EVAL[i]
  COMP[i][8]=DOQ[i]
  COMP[i][9]=HOQ[i]
  COMP[i][10]=MEL_MIC_PITCH_NP[i]
  COMP[i][11]=MEL_EGG_PITCH_NP[i]
  COMP[i][12]=MEL_SUB_PITCH_NP[i]
  COMP[i][13]=ABI[i]

"""ALL PLOTS"""

plt.rcParams.update({'font.size': 26})
plt.rcParams.update({'font.family': 'STIX General'})
import seaborn as sns
xliml = -0.05
xlimr = 4.05

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
sns.set_style("darkgrid")
plt.grid(color = 'grey', linestyle = '-', alpha=0.3, linewidth = 0.5)
plt.xlim(xliml, xlimr)
plt.ylabel("FREQUENCY (PITCH DIFFERENCE)")
plt.xlabel("BREATHINESS")
plt.show()

# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("FREQUENCY (PITCH ABS DIFFERENCE)")
plt.xlabel("BREATHINESS")
plt.show()

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("FREQUENCY (PITCH MEL DIFFERENCE)")
plt.xlabel("BREATHINESS")
plt.show()

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("CPP MIC")
plt.xlabel("BREATHINESS")
plt.show()

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("CPP EGG")
plt.xlabel("BREATHINESS")
plt.show()

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("DEG OQ")
plt.xlabel("BREATHINESS")
plt.show()

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("HOWARD OQ")
plt.xlabel("BREATHINESS")
plt.show()

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
plt.xlim(xliml, xlimr)
plt.ylabel("ABI")
plt.xlabel("BREATHINESS")
plt.show()

"""Pearson Correlation Coefficient"""

from scipy import stats
dec = 10

print('___________________________________')
print('Pearson Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]

my_rho = stats.pearsonr(x, y)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))


# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.pearsonr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.pearsonr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.pearsonr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.pearsonr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.pearsonr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.pearsonr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.pearsonr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('___________________________________')
print('Spearman Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]
my_rho = stats.spearmanr(x, y)
#print('DIFS / BREATHINESS cor = ', my_rho)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.spearmanr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.spearmanr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.spearmanr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.spearmanr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.spearmanr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.spearmanr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.spearmanr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI OQ / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('MEANS')
column_means = COMP.mean(axis=0)

print("MIC PITCH")
print(column_means[1])

print("MEL MIC PITCH")
print(column_means[10])

print("EGG PITCH")
print(column_means[2])

print("MEL EGG PITCH")
print(column_means[11])

print("SUB PITCH")
print(column_means[3])

print("MEL SUB PITCH")
print(column_means[12])

print("ABS SUB PITCH")
print(column_means[4])

print("BR EVAL")
print(column_means[5])

print("CPP EVAL")
print(column_means[6])

print("CPP EGG EVAL")
print(column_means[7])

print("DEGOQ")
print(column_means[8])

print("HOQ")
print(column_means[9])

print('')
print('___________________________________')
print('')

print('CLASSES (<=0.75, <=1.5, <=2.25, <=3.25, <=4)')

l = COMP.shape[0]
c = COMP.shape[1]
SUMS = np.zeros((5, c))
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0

for i in range (0, l):
    if (COMP[i][5] < 0.75):
      SUMS[0][0] = SUMS[0][0] + 1
      SUMS[0][1:] = SUMS[0][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 1.5):
      SUMS[1][0] = SUMS[1][0] + 1
      SUMS[1][1:] = SUMS[1][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 2.25):
      SUMS[2][0] = SUMS[2][0] + 1
      SUMS[2][1:] = SUMS[2][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 3.25):
      SUMS[3][0] = SUMS[3][0] + 1
      SUMS[3][1:] = SUMS[3][1:] + COMP[i][1:]
    else:
      SUMS[4][0] = SUMS[4][0] + 1
      SUMS[4][1:] = SUMS[4][1:] + COMP[i][1:]

print('SUM VALUES')
print(SUMS)
print('SAMLES: ', l)

print('')
print('___________________________________')
print('')

print('MEAN VALUES')
MEAN = np.zeros((5, c))
for m in range (1, c):
  MEAN[0][m] = SUMS[0][m]/SUMS[0][0]
  MEAN[1][m] = SUMS[1][m]/SUMS[1][0]
  MEAN[2][m] = SUMS[2][m]/SUMS[2][0]
  MEAN[3][m] = SUMS[3][m]/SUMS[3][0]
  MEAN[4][m] = SUMS[4][m]/SUMS[4][0]
print(MEAN)

print('')
print('___________________________________')
print('')

"""CORRELATIONS ROUND"""

from scipy import stats
dec = 4

print('___________________________________')
print('Pearson Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]

#my_rho = np.corrcoef(x, y)
my_rho = stats.pearsonr(x, y)
#print('DIFS / BREATHINESS cor = ', my_rho)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))


# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.pearsonr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.pearsonr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.pearsonr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.pearsonr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.pearsonr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.pearsonr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.pearsonr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('___________________________________')
print('Spearman Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]
my_rho = stats.spearmanr(x, y)
#print('DIFS / BREATHINESS cor = ', my_rho)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.spearmanr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.spearmanr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.spearmanr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.spearmanr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.spearmanr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.spearmanr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.spearmanr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('MEANS')
column_means = COMP.mean(axis=0)

print("MIC PITCH")
print(column_means[1])

print("MEL MIC PITCH")
print(column_means[10])

print("EGG PITCH")
print(column_means[2])

print("MEL EGG PITCH")
print(column_means[11])

print("SUB PITCH")
print(column_means[3])

print("MEL SUB PITCH")
print(column_means[12])

print("ABS SUB PITCH")
print(column_means[4])

print("BR EVAL")
print(column_means[5])

print("CPP EVAL")
print(column_means[6])

print("CPP EGG EVAL")
print(column_means[7])

print("DEGOQ")
print(column_means[8])

print("HOQ")
print(column_means[9])

print('')
print('___________________________________')
print('')

print('CLASSES (<=0.75, <=1.5, <=2.25, <=3.25, <=4)')

l = COMP.shape[0]
c = COMP.shape[1]
SUMS = np.zeros((5, c))
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0

for i in range (0, l):
    if (COMP[i][5] < 0.75):
      SUMS[0][0] = SUMS[0][0] + 1
      SUMS[0][1:] = SUMS[0][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 1.5):
      SUMS[1][0] = SUMS[1][0] + 1
      SUMS[1][1:] = SUMS[1][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 2.25):
      SUMS[2][0] = SUMS[2][0] + 1
      SUMS[2][1:] = SUMS[2][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 3.25):
      SUMS[3][0] = SUMS[3][0] + 1
      SUMS[3][1:] = SUMS[3][1:] + COMP[i][1:]
    else:
      SUMS[4][0] = SUMS[4][0] + 1
      SUMS[4][1:] = SUMS[4][1:] + COMP[i][1:]

print('SUM VALUES')
print(SUMS)
print('SAMLES: ', l)

print('')
print('___________________________________')
print('')

print('MEAN VALUES')
MEAN = np.zeros((5, c))
for m in range (1, c):
  MEAN[0][m] = SUMS[0][m]/SUMS[0][0]
  MEAN[1][m] = SUMS[1][m]/SUMS[1][0]
  MEAN[2][m] = SUMS[2][m]/SUMS[2][0]
  MEAN[3][m] = SUMS[3][m]/SUMS[3][0]
  MEAN[4][m] = SUMS[4][m]/SUMS[4][0]
print(MEAN)

print('')
print('___________________________________')
print('')

"""REGRESSION 1"""

import sys
np.set_printoptions(threshold=sys.maxsize)
LR = np.zeros((456, 3))
RR = np.zeros((456, 1))
for i in range (0, 456):
  LR[i][0]=CPP_EVAL[i]
  LR[i][1]=DOQ[i]
  LR[i][2]=HOQ[i]
  RR[i]=BR_EVAL[i]

import numpy as np
import statsmodels.api as sm
def get_stats():
    x = LR
    y = RR
    results = sm.OLS(y, x).fit()
    print(results.summary())
get_stats()

import sklearn
from sklearn.linear_model import LinearRegression
x = LR
linear_model = sklearn.linear_model.LinearRegression()
linear_model.fit(LR, RR)
print(linear_model.coef_)

BI = np.zeros((456,1))
for i in range (0,456):
  BI[i] = (-0.20688984 * COMP[i][6]) +  (-3.21878076 * COMP[i][8]) + (9.56627174 * COMP[i][9]) 

print(BI.shape)

x = COMP[:,5]
y = BI
my_rho = stats.spearmanr(x, y)
print('CDH / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH / BREATHINESS p = ', round(my_rho[1], dec))

COMP = np.zeros((456, 15))
for i in range (0, 456):
  COMP[i][0]=i
  COMP[i][1]=MIC_PITCH_NP[i]
  COMP[i][2]=EGG_PITCH_NP[i]
  COMP[i][3]=SUB_PITCH_NP[i]
  COMP[i][4]=abs(SUB_PITCH_NP[i])
  COMP[i][5]=BR_EVAL[i]
  COMP[i][6]=CPP_EVAL[i]
  COMP[i][7]=CPP_EGG_EVAL[i]
  COMP[i][8]=DOQ[i]
  COMP[i][9]=HOQ[i]
  COMP[i][10]=MEL_MIC_PITCH_NP[i]
  COMP[i][11]=MEL_EGG_PITCH_NP[i]
  COMP[i][12]=MEL_SUB_PITCH_NP[i]
  COMP[i][13]=ABI[i]
  COMP[i][14]=BI[i]
print(COMP)
print(COMP.shape)

from scipy import stats
dec = 4

print('___________________________________')
print('Pearson Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]

my_rho = stats.pearsonr(x, y)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))


# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.pearsonr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.pearsonr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.pearsonr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.pearsonr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.pearsonr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.pearsonr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.pearsonr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

# CDH / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
my_rho = stats.pearsonr(x, y)
print('CDH / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('___________________________________')
print('Spearman Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]
my_rho = stats.spearmanr(x, y)
#print('DIFS / BREATHINESS cor = ', my_rho)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.spearmanr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.spearmanr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.spearmanr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.spearmanr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.spearmanr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.spearmanr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.spearmanr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

# CDH / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
my_rho = stats.spearmanr(x, y)
print('CDH / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

RMEAN = np.round(MEAN, 4)
print(RMEAN)



plt.rcParams.update({'font.size': 26})
plt.rcParams.update({'font.family': 'STIX General'})
import seaborn as sns
xliml = -0.05
xlimr = 4.05

# PITCH ΒΙ / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
sns.set_style("darkgrid")
plt.grid(color = 'grey', linestyle = '-', alpha=0.3, linewidth = 0.5)
plt.xlim(xliml, xlimr)
plt.ylabel("ΒΙ")
plt.xlabel("BREATHINESS")
plt.show()

"""REGRESSION 2"""

import sys
np.set_printoptions(threshold=sys.maxsize)
LR = np.zeros((456, 4))
RR = np.zeros((456, 1))

for i in range (0, 456):
  LR[i][0]=CPP_EVAL[i]
  LR[i][1]=DOQ[i]
  LR[i][2]=HOQ[i]
  LR[i][3]=ABI[i]
  RR[i]=BR_EVAL[i]

import numpy as np
import statsmodels.api as sm
def get_stats():
    x = LR
    y = RR
    results = sm.OLS(y, x).fit()
    print(results.summary())
get_stats()

import sklearn
from sklearn.linear_model import LinearRegression
x = LR
linear_model = sklearn.linear_model.LinearRegression()
linear_model.fit(LR, RR)

print(linear_model.coef_)

dec = 4
BBI = np.zeros((456,1))

for i in range (0,456):
  BBI[i] = (-0.06959419 * COMP[i][6]) +  (-3.26429585 * COMP[i][8]) + (8.27435347 * COMP[i][9]) + (0.2633933 * COMP[i][13]) 

print(BBI.shape)

x = COMP[:,5]
y = BBI
my_rho = stats.spearmanr(x, y)
print('CDH+ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH+ABI / BREATHINESS p = ', round(my_rho[1], dec))

COMP = np.zeros((456, 17))
for i in range (0, 456):
  COMP[i][0]=i
  COMP[i][1]=MIC_PITCH_NP[i]
  COMP[i][2]=EGG_PITCH_NP[i]
  COMP[i][3]=SUB_PITCH_NP[i]
  COMP[i][4]=abs(SUB_PITCH_NP[i])
  COMP[i][5]=BR_EVAL[i]
  COMP[i][6]=CPP_EVAL[i]
  COMP[i][7]=CPP_EGG_EVAL[i]
  COMP[i][8]=DOQ[i]
  COMP[i][9]=HOQ[i]
  COMP[i][10]=MEL_MIC_PITCH_NP[i]
  COMP[i][11]=MEL_EGG_PITCH_NP[i]
  COMP[i][12]=MEL_SUB_PITCH_NP[i]
  COMP[i][13]=ABI[i]
  COMP[i][14]=BI[i]
  COMP[i][15]=BBI[i]
  COMP[i][16]= abs(MEL_SUB_PITCH_NP[i])
print(COMP)
print(COMP.shape)

from scipy import stats
dec = 4

print('___________________________________')
print('Pearson Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]

my_rho = stats.pearsonr(x, y)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))


# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.pearsonr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.pearsonr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.pearsonr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.pearsonr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.pearsonr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.pearsonr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.pearsonr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

# CDH / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
my_rho = stats.pearsonr(x, y)
print('CDH / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH / BREATHINESS p = ', round(my_rho[1], dec))

# CDHA / BREATHINESS
x = COMP[:,5]
y = COMP[:,15]
my_rho = stats.pearsonr(x, y)
print('CDH+ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH+ABI / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')

print('___________________________________')
print('Spearman Correlation Coefficients')

# PITCH DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,3]
my_rho = stats.spearmanr(x, y)
#print('DIFS / BREATHINESS cor = ', my_rho)
print('DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH ABS DIFS / BREATHINESS
x = COMP[:,5]
y = COMP[:,4]
my_rho = stats.spearmanr(x, y)
print('ABS DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABS DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH DIFFS MEL / BREATHINESS
x = COMP[:,5]
y = COMP[:,12]
my_rho = stats.spearmanr(x, y)
print('MEL DIFS / BREATHINESS cor = ', round(my_rho[0], dec))
print('MEL DIFS / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP MIC / BREATHINESS
x = COMP[:,5]
y = COMP[:,6]
my_rho = stats.spearmanr(x, y)
print('CPP MIC / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP MIC / BREATHINESS p = ', round(my_rho[1], dec))

# PITCH CPP EGG / BREATHINESS
x = COMP[:,5]
y = COMP[:,7]
my_rho = stats.spearmanr(x, y)
print('CPP EGG / BREATHINESS cor = ', round(my_rho[0], dec))
print('CPP EGG / BREATHINESS p = ', round(my_rho[1], dec))

# DEGG OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,8]
my_rho = stats.spearmanr(x, y)
print('DEG OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('DEG OQ / BREATHINESS p = ', round(my_rho[1], dec))

# HOWARD OQ / BREATHINESS
x = COMP[:,5]
y = COMP[:,9]
my_rho = stats.spearmanr(x, y)
print('HOWARD OQ / BREATHINESS cor = ', round(my_rho[0], dec))
print('HOWARD OQ / BREATHINESS p = ', round(my_rho[1], dec))

# ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,13]
my_rho = stats.spearmanr(x, y)
print('ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('ABI / BREATHINESS p = ', round(my_rho[1], dec))

# CDH / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
my_rho = stats.spearmanr(x, y)
print('CDH / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH / BREATHINESS p = ', round(my_rho[1], dec))

# CDH+ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,15]
my_rho = stats.spearmanr(x, y)
print('CDH+ABI / BREATHINESS cor = ', round(my_rho[0], dec))
print('CDH+ABI / BREATHINESS p = ', round(my_rho[1], dec))

print('')
print('___________________________________')
print('')


l = COMP.shape[0]
c = COMP.shape[1]
SUMS = np.zeros((5, c))
count0 = 0
count1 = 0
count2 = 0
count3 = 0
count4 = 0

for i in range (0, l):
    if (COMP[i][5] < 0.75):
      SUMS[0][0] = SUMS[0][0] + 1
      SUMS[0][1:] = SUMS[0][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 1.5):
      SUMS[1][0] = SUMS[1][0] + 1
      SUMS[1][1:] = SUMS[1][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 2.25):
      SUMS[2][0] = SUMS[2][0] + 1
      SUMS[2][1:] = SUMS[2][1:] + COMP[i][1:]
    elif (COMP[i][5] <= 3.25):
      SUMS[3][0] = SUMS[3][0] + 1
      SUMS[3][1:] = SUMS[3][1:] + COMP[i][1:]
    else:
      SUMS[4][0] = SUMS[4][0] + 1
      SUMS[4][1:] = SUMS[4][1:] + COMP[i][1:]

print('SUM VALUES')
print(SUMS)
print('SAMLES: ', l)

print('')
print('___________________________________')
print('')

print('MEAN VALUES')
MEAN = np.zeros((5, c))
for m in range (1, c):
  MEAN[0][m] = SUMS[0][m]/SUMS[0][0]
  MEAN[1][m] = SUMS[1][m]/SUMS[1][0]
  MEAN[2][m] = SUMS[2][m]/SUMS[2][0]
  MEAN[3][m] = SUMS[3][m]/SUMS[3][0]
  MEAN[4][m] = SUMS[4][m]/SUMS[4][0]

RMEAN = np.round(MEAN, 4)
print(RMEAN)



plt.rcParams.update({'font.size': 26})
plt.rcParams.update({'font.family': 'STIX General'})
import seaborn as sns
xliml = -0.05
xlimr = 4.05

# PITCH CDH / BREATHINESS
x = COMP[:,5]
y = COMP[:,14]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
sns.set_style("darkgrid")
plt.grid(color = 'grey', linestyle = '-', alpha=0.3, linewidth = 0.5)
plt.xlim(xliml, xlimr)
plt.ylabel("CDH")
plt.xlabel("BREATHINESS")
plt.show()


# PITCH CDH+ABI / BREATHINESS
x = COMP[:,5]
y = COMP[:,15]
plt.figure(figsize=(15,15))
plt.plot(x, y, "o", color = 'purple')
sns.regplot(x, y, color = 'orange')
sns.set_style("darkgrid")
plt.grid(color = 'grey', linestyle = '-', alpha=0.3, linewidth = 0.5)
plt.xlim(xliml, xlimr)
plt.ylabel("CDH+ABI")
plt.xlabel("BREATHINESS")
plt.show()